version: "3.7"

# 创建自定义网络
networks:
  drone:
    # external: false
    driver: bridge

services:
#  # 数据库服务
#  db:
#    image: postgres:latest
#    container_name: drone_db
#    restart: always
#    networks:
#      - drone # 加入到drone网络
#    ports:
#      - "8081:5432" # 8081为容器暴露到服务器的端口，5432为容器内改应用的端口
#    environment:
#      - POSTGRES_USER=username # PGSQL默认用户名
#      - POSTGRES_PASSWORD=password # PGSQL默认密码
#      - POSTGRES_DB=db_name # PGSQL默认数据库的名字
#    volumes:
#      - ~/app/vol/drone/db:/var/lib/postgresql/data # 数据卷，前者为服务器真实位置，后者为改应用在容器内的位置

  # Drone Server 服务
  server:
    image: drone/drone:2.13 # https://hub.docker.com/r/drone/drone/tags
    container_name: drone_server
#    restart: always
    networks:
      - drone # 加入到drone网络
    ports:
      - "8850:80"
      - "8853:443"
    environment:
      - DRONE_SERVER_PROTO=http # 访问协议，创建webHooks和重定向
      - DRONE_SERVER_HOST=${DRONE_SERVER_HOST} # 主机名称, 不带协议名，创建webHooks和重定向; 如果主机名与仓库设置的` OAuth2 应用程序 > 重定向 URI`不一致,则授权页面报错
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET} # 与 drone runner 通讯的密钥,32位随机字串
      - DRONE_USER_CREATE=${DRONE_USER_CREATE} # 创建一个管理员账号，该账号需要在Gitea中注册好。https://docs.drone.io/server/reference/drone-user-create/
#      - DRONE_DATABASE_DRIVER=postgres # 数据库类型
#      - DRONE_DATABASE_DATASOURCE=postgres://username:password@db/db_name?sslmode=disable # 数据库连接
      # 这里选择使用外部数据库,方便保存和观察数据
      - DRONE_DATABASE_DRIVER=${DRONE_DATABASE_DRIVER} # 数据库类型
      # 数据库账号非管理员时报错`{"error":"Error 1419: You do not have the SUPER privilege and binary logging is enabled (you *might* want to use the less safe log_bin_trust_function_creators variable)","level":"fatal","msg":"main: cannot initialize server","time":"2022-10-05T01:49:42Z"}`
#      - DRONE_DATABASE_DATASOURCE=drone:drone123@tcp(host.docker.internal:3306)/drone?parseTime=true # 数据库连接
      - DRONE_DATABASE_DATASOURCE=${DRONE_DATABASE_DATASOURCE} # 数据库连接
      - DRONE_GIT_ALWAYS_AUTH=true # 使用 oauth 身份验证信息拉取代码
      - DRONE_GITEA_SERVER=${DRONE_GITEA_SERVER} # GITEA 服务端 url; 协议名不能缺省
      - DRONE_GITEA_CLIENT_ID=${DRONE_GITEA_CLIENT_ID} # GITEA 客户端 id
      - DRONE_GITEA_CLIENT_SECRET=${DRONE_GITEA_CLIENT_SECRET} # GITEA 客户端 密钥
    volumes:
      - ~/app/vol/drone/server:/data
      - /var/run/docker.sock:/var/run/docker.sock
#    depends_on:
#      - db

  # Drone Docker Runner
  runner:
    image: drone/drone-runner-docker:1.8
    container_name: drone_runner
#    restart: always
    networks:
      - drone # 加入到drone网络
    ports:
      - "8855:3000"
    environment:
      - DRONE_RUNNER_NAME=drone-runner
      - DRONE_RUNNER_CAPACITY=4 # 限制runner可执行的并发管道数量
      - DRONE_RPC_PROTO=http # 访问drone server 协议
#      - DRONE_RPC_HOST=drone.tt # 访问drone server 服务器地址
      - DRONE_RPC_HOST=drone_server # 访问drone server 服务器地址
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET} # 与 drone server 通讯的密钥
      - DRONE_UI_USERNAME=${DRONE_UI_USERNAME} # Drone Runner 的 UI 用户账号
      - DRONE_UI_PASSWORD=${DRONE_UI_PASSWORD} # Drone Runner 的 UI 用户密码
      # - DRONE_RUNNER_NETWORKS=drone_net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - server
